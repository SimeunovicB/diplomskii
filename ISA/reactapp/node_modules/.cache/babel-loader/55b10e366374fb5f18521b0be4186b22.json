{"ast":null,"code":"var _jsxFileName = \"D:\\\\diplomski react\\\\projekat\\\\reactapp\\\\src\\\\components\\\\pages\\\\AllFighters.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport FighterList from \"../fighters/FighterList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllFightersPage() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadedFighters, setLoadedFighters] = useState([]);\n  useEffect(() => {\n    setIsLoading(true);\n    axios({\n      method: \"get\",\n      url: \"http://127.0.0.1:8000/fighters/\"\n    }).then(response => {\n      let fighters = response.data; // console.log(\"FAJTERI\", fighters)\n\n      for (let i in fighters) {\n        console.log(fighters[i]);\n      }\n\n      setIsLoading(false);\n      const fighterss = [];\n      setLoadedFighters(fighterss);\n    });\n  }, []); //ako se drugom argumentu promeni stanje onda se opet pozove funkcija\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All fighters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FighterList, {\n      fighters: loadedFighters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllFightersPage, \"OcHDyFfxrZLan8n29zFmIR9/T6Q=\");\n\n_c = AllFightersPage;\nexport default AllFightersPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllFightersPage\");","map":{"version":3,"sources":["D:/diplomski react/projekat/reactapp/src/components/pages/AllFighters.js"],"names":["useState","useEffect","axios","FighterList","AllFightersPage","isLoading","setIsLoading","loadedFighters","setLoadedFighters","method","url","then","response","fighters","data","i","console","log","fighterss"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,SAASC,eAAT,GAA2B;AAAA;;AACzB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAJ,IAAAA,KAAK,CAAC;AACJO,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE;AAFD,KAAD,CAAL,CAGGC,IAHH,CAGSC,QAAD,IAAc;AACpB,UAAIC,QAAQ,GAAGD,QAAQ,CAACE,IAAxB,CADoB,CAEpB;;AACA,WAAI,IAAIC,CAAR,IAAaF,QAAb,EAAuB;AACrBG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACE,CAAD,CAApB;AACD;;AACDT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMY,SAAS,GAAG,EAAlB;AACAV,MAAAA,iBAAiB,CAACU,SAAD,CAAjB;AACD,KAZD;AAaD,GAhBQ,EAgBN,EAhBM,CAAT,CAJyB,CAoBjB;;AAER,MAAIb,SAAJ,EAAe;AACb,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApCQH,e;;KAAAA,e;AAsCT,eAAeA,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport FighterList from \"../fighters/FighterList\";\r\n\r\nfunction AllFightersPage() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loadedFighters, setLoadedFighters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n\r\n    axios({\r\n      method: \"get\",\r\n      url: \"http://127.0.0.1:8000/fighters/\",\r\n    }).then((response) => {\r\n      let fighters = response.data;\r\n      // console.log(\"FAJTERI\", fighters)\r\n      for(let i in fighters) {\r\n        console.log(fighters[i]);\r\n      }\r\n      setIsLoading(false);\r\n      const fighterss = []\r\n      setLoadedFighters(fighterss);\r\n    });\r\n  }, []); //ako se drugom argumentu promeni stanje onda se opet pozove funkcija\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <section>\r\n        <p>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>All fighters</h1>\r\n      <FighterList fighters={loadedFighters} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllFightersPage;\r\n"]},"metadata":{},"sourceType":"module"}